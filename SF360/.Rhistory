nsdiffs(Bankruptcy_Rate_train, m=6)
ndiffs(diff(Bankruptcy_Rate_train, lag=6))
ndiffs(diff(Bankruptcy_Rate_train, lag=6), test="adf")
nsdiffs(diff(Bankruptcy_Rate_train), m=6)
cf(Bankruptcy_Rate_train)
acf(Bankruptcy_Rate_train)
acf(Bankruptcy_Rate_train, lags)
acf(Bankruptcy_Rate_train, lag=36)
nsdiffs(diff(Bankruptcy_Rate_train), m=4)
nsdiffs(Bankruptcy_Rate_train, m=4)
nsdiffs(Bankruptcy_Rate_train, m=3)
nsdiffs(Bankruptcy_Rate_train, m=5)
nsdiffs(Bankruptcy_Rate_train, m=6)
nsdiffs(Bankruptcy_Rate_train, m=7)
nsdiffs(Bankruptcy_Rate_train, m=8)
nsdiffs(Bankruptcy_Rate_train, m=9)
nsdiffs(Bankruptcy_Rate_train, m=10)
nsdiffs(Bankruptcy_Rate_train, m=11)
nsdiffs(Bankruptcy_Rate_train, m=12)
nsdiffs(Bankruptcy_Rate_train, m=24)
nsdiffs(Bankruptcy_Rate_train, m=18)
acf(nsdiffs(Bankruptcy_Rate_train, m=6))
acf(diff(Bankruptcy_Rate_train, lag=6))
plot(diff(Bankruptcy_Rate_train, lag=6))
ndiffs(diff(Bankruptcy_Rate_train, lag=6))
ndiffs(diff(Bankruptcy_Rate_train, lag=6), test="adf")
?ndiffs
ndiffs(diff(Bankruptcy_Rate_train, lag=6), test="adf")
nsdiffs(diff(Bankruptcy_Rate_train), m=6)
nsdiffs(diff(Bankruptcy_Rate_train, difference=2), m=6)
nsdiffs(diff(diff(Bankruptcy_Rate_train, difference=2), lag=6), m=6)
ndiffs(diff(Bankruptcy_Rate_train, lag=6), test="adf")
ndiffs(diff(log(Bankruptcy_Rate_train), lag=6), test="adf")
acf(diff(log(Bankruptcy_Rate_train), lag=6))
plot(diff(log(Bankruptcy_Rate_train), lag=6))
model<-arima(log(Bankruptcy_Rate_train), order = c(2,2,4), seasonal=list(order=c(0,1,3), period=6), method = "ML", xreg = data.frame(House_Price_Index_train))
model
par(mfrow=c(2,1))
qqnorm(model$residuals)
qqline(model$residuals, col = 'red')
plot(model$residuals, main="Residuals vs t", ylab="")
par(mfrow=c(1,1))
tsdiag(model, gof.lag = 12) #ACF and Ljung-Box test all in one!
t.test(model$residuals) #mean
group <- c(rep(1,69), rep(2,69), rep(3,69), rep(4,69))
levene.test(model$residuals,group) #Levene
runs.test(model$residuals) #Runs test for randomness
shapiro.test(model$residuals) # Normality
model<-arima(log(Bankruptcy_Rate_train), order = c(2,0,4), seasonal=list(order=c(0,1,3), period=6), method = "ML", xreg = data.frame(House_Price_Index_train))
par(mfrow=c(2,1))
qqnorm(model$residuals)
qqline(model$residuals, col = 'red')
plot(model$residuals, main="Residuals vs t", ylab="")
par(mfrow=c(1,1))
tsdiag(model, gof.lag = 12) #ACF and Ljung-Box test all in one!
t.test(model$residuals) #mean
group <- c(rep(1,69), rep(2,69), rep(3,69), rep(4,69))
levene.test(model$residuals,group) #Levene
runs.test(model$residuals) #Runs test for randomness
shapiro.test(model$residuals) # Normality
model<-arima(log(Bankruptcy_Rate_train), order = c(2,1,4), seasonal=list(order=c(0,1,3), period=6), method = "ML", xreg = data.frame(House_Price_Index_train))
par(mfrow=c(2,1))
qqnorm(model$residuals)
qqline(model$residuals, col = 'red')
plot(model$residuals, main="Residuals vs t", ylab="")
par(mfrow=c(1,1))
tsdiag(model, gof.lag = 12) #ACF and Ljung-Box test all in one!
t.test(model$residuals) #mean
group <- c(rep(1,69), rep(2,69), rep(3,69), rep(4,69))
levene.test(model$residuals,group) #Levene
runs.test(model$residuals) #Runs test for randomness
tsdiag(model, gof.lag = 12) #ACF and Ljung-Box test all in one!
model<-arima(log(Bankruptcy_Rate_train), order = c(2,2,4), seasonal=list(order=c(0,1,3), period=6), method = "ML", xreg = data.frame(House_Price_Index_train))
tsdiag(model, gof.lag = 48) #ACF and Ljung-Box test all in one!
model<-arima(log(Bankruptcy_Rate_train), order = c(2,0,4), seasonal=list(order=c(0,1,3), period=6), method = "ML", xreg = data.frame(House_Price_Index_train))
model
acf(log(Bankruptcy_Rate_train), lag=36)
acf(log(Bankruptcy_Rate_train), lag=36)
acf(nsdiffs(log(Bankruptcy_Rate_train), m =6), lag=36)
acf(diff(log(Bankruptcy_Rate_train), lag =6), lag=36)
ndiffs(diff(log(Bankruptcy_Rate_train), lag =6))
ndiffs(diff(log(Bankruptcy_Rate_train), lag =6), test="adf")
pacf(diff(log(Bankruptcy_Rate_train), lag = 6))
acf(diff(log(Bankruptcy_Rate_train), lag =6), lag=36)
nsdiffs(diff(log(Bankruptcy_Rate_train), lag =6), m=6)
acf(diff(log(Bankruptcy_Rate_train), lag =6), lag=36)
plot(diff(log(Bankruptcy_Rate_train), lag =6))
mean(diff(log(Bankruptcy_Rate_train), lag =6))
acf(diff(log(Bankruptcy_Rate_train), lag =6), lag=36)
df <- data.frame(orders = character(), sigma_2 = numeric(),
loglik = numeric(), pval = numeric(),
rmse_val = numeric(), rmse_com = numeric())
for (p in seq(0,2)){
for (q in seq(0,2)){
for (P in seq(0,1)){
for (Q in seq(0,2)){
model <- arima(log(Bankruptcy_Rate_train),
order = c(p, 0, q),
seasonal = list(order= c(P, 1, Q), period = 6),
method = "CSS",
xreg = data.frame(House_Price_Index_train))
pval <- round(levene.test(model$residuals,group)$p,3)
f <- forecast(model, h=12, level=0.95, xreg = val$House_Price_Index)
rmse_c <- sqrt(mean((Bankruptcy_Rate_train - exp(f$fitted))^2))
f <- predict(model, n.ahead = 12, newxreg = val$House_Price_Index)
rmse_v <- sqrt(mean((val$Bankruptcy_Rate - exp(f$pred))^2))
df <- rbind(df, data.frame(orders = paste(p,0,q,P,1,Q, sep=","),
sigma_2 = model$sigma2,
loglik = model$loglik,
pval= pval,
rmse_val = rmse_v,
rmse_comp = rmse_c))
}
}
}
}
df
df[order(df$rmse_val),]
Bankruptcy_Rate_train <- ts(train$Bankruptcy_Rate)
House_Price_Index_train <- ts(train$House_Price_Index)
Unemployment_Rate_train <- ts(train$Unemployment_Rate)
plot(Bankruptcy_Rate_train, ylab = "Bankruptcy Rate")
plot(log(Bankruptcy_Rate_train), ylab = "log(Bankruptcy Rate)",
main = "Log Transformed Time Series")
log.Bankruptcy_Rate_train.1 <- diff(log(Bankruptcy_Rate_train))
par(mfrow= c(2,1))
acf(log.Bankruptcy_Rate_train.1, lag.max = 48, main = "Log Transformed and Differenced Bankruptcy Rate")
pacf(log.Bankruptcy_Rate_train.1, lag.max = 48, main = "")
df$m_bookings <- as.numeric(df$m_bookings>0)
model = glm(m_bookings~. , data=df, family='binomial')
df <- read.csv("~/export/df.txt", header=T, stringsAsFactors=T)
head(df)
df$m_bookings <- as.numeric(df$m_bookings>0)
model = glm(m_bookings~. , data=df, family='binomial')
model
summary(model)
df <- read.csv("~/export/df_interaction.txt", header=T, stringsAsFactors=T)
head(df)
df$m_bookings <- as.numeric(df$m_bookings>0)
model = glm(m_bookings~. , data=df, family='binomial')
install.packages("clickstream")
library("clickstream")
data <- read.csv("~/export/markov_and_more.txt", header=T, stringsAsFactors=T)
head(data)
data <- read.csv("~/export/clickstream.txt", header=T, stringsAsFactors=T)
data <- read.csv("~/export/clickstream.csv", header=T, stringsAsFactors=T)
head(data)
data[1,1]
data$X <- NULL
data[1]
dim(data)
data[2]
data[1,2]
type(data[1,2])
class(data[1,2])
data[1,2].replace('[', '')
?replace
data[1,2].sub('[', '')
?sub
as.character(data[1,2]).sub('[', '')
as.character(data[1,2]).sub(r'[', '')
sub(r'[', '', as.character(data[1,2]))
sub('[', '', as.character(data[1,2]))
sub("[", '', as.character(data[1,2]))
sub("[", " ", as.character(data[1,2]))
sub("\[", " ", as.character(data[1,2]))
?str_replace
sub("[\[]", " ", as.character(data[1,2]))
sub("[[]", " ", as.character(data[1,2]))
install.packages("clickstream")
library("clickstream")
install.packages("clickstream")
data <- read.csv("~/export/clickstream.csv", header=T, stringsAsFactors=T)
data$X <- NULL
head(data)
?clusterClickstreams
clusterClickstreams(data)
data <- read.csv("~/export/clickstream.csv", header=T, stringsAsFactors=T)
head(data)
clusterClickstreams(data[clickstream])
sub("[[]", " ", as.character(data[1,2]))
sub("[[]]", " ", as.character(data[1,2]))
sub("[][]", " ", as.character(data[1,2]))
gsub("[][]", " ", as.character(data[1,2]))
gsub("[][']", " ", as.character(data[1,2]))
gsub("[][' ]", " ", as.character(data[1,2]))
gsub("[]['\s]", " ", as.character(data[1,2]))
gsub("[]['\ ]", " ", as.character(data[1,2]))
gsub("[][']", " ", as.character(data[1,2]))
lapply(data$clickstream, gsub("[][']", " ", as.character(data[1,2])))
lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x))
lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = lapply(d, function(x) gsub(" ", "", as.character(x)))
d
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = lapply(d, function(x) gsub(" ", "", as.character(x)))
d
d = lapply(d, function(x) gsub(" ", "", as.character(x)), simplifyT)
d = lapply(d, function(x) gsub(" ", "", as.character(x)), simplify=T)
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
d
clusterClickstreams(d)
type(d[1])
class(d[1])
type(d)
class(d)
clickstream = sapply(d, function(x) c)
clickstream
d
clickstream = c()
library(data.table)
rbindlist(d)
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
clickstream
length(d)
k = c(1,2)
k
dim(k)
dim(d)
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
print(clusters)
summary(clusters)
fitMarkovChain(cluster)
fitMarkovChain(clusters)
?fitMarkovChain
fitMarkovChain(cls)
mc <- fitMarkovChain(cls)
show(mc)
plot(mc)
print.mc
data <- read.csv("~/export/clickstream.csv", header=T, stringsAsFactors=T)
head(data)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
print(clusters)
mc <- fitMarkovChain(cls)
plot(mc)
clusters
summary(clusters)
frequencyDF <- frequencies(cls)
frequencyDF
head(frequencyDF)
print(cls)
cluster$cluster
cluster$clusters
clusters$clusters
type(clusters$clusters)
class(clusters$clusters)
clusters$clusters[1]
clusters$clusters[1][1]
head(clusters$clusters[1])
clusters$clusters[1]
clusters$clusters[[1]]
clusters$clusters[[1]][1]
clusters$clusters[[1]][1][0]
clusters$clusters[[1]][1]$name
type(clusters$clusters[[1]][1])
calss(clusters$clusters[[1]][1])
class(clusters$clusters[[1]][1])
names(clusters$clusters[[1]][1])
names(clusters$clusters)
names(clusters$clusters[[1]])
c1 <- clusters$clusters[1]
c2 <- clusters$clusters[2]
names(c1)
c1 <- clusters$clusters[[1]]
names(c1)
c2 <- clusters$clusters[[2]]
names(c2)
head(daa)
head(data)
data <- read.csv("~/export/clickstream.csv", header=T, stringsAsFactors=T)
head(data)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
names(c1)
head(data)
data[interaction==0, id] %in% names(c1)
data[data$interaction==0, data$id] %in% names(c1)
data[data$interaction==0, 'id'] %in% names(c1)
data[data$interaction==0, 'id'] %in% names(c2)
sum(data[data$interaction==0, 'id'] %in% names(c2))
sum(data[data$interaction==1, 'id'] %in% names(c1))
sum(data[data$interaction==10, 'id'] %in% names(c1))
sum(data[data$interaction==0, 'id'] %in% names(c1))
sum(data[data$interaction==1, 'id'] %in% names(c2))
sum(data[data$interaction==1, 'id'] %in% names(c2))
sum(data[data$interaction==0, 'id'] %in% names(c1))
plot(mc)
mc <- fitMarkovChain(cls)
plot(mc)
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
mc <- fitMarkovChain(cls)
plot(mc)
clusters$centers
summary(cls)
cls
clusters
summary(clusters)
summary(cls)
mc
data <- read.csv("~/export/clickstream_booked.csv", header=T, stringsAsFactors=T)
head(data)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
names(c1)
names(c2)
sum(data[data$interaction==0, 'id'] %in% names(c1)) #1522
sum(data[data$interaction==1, 'id'] %in% names(c2)) #1198
data <- read.csv("~/export/clickstream_booked.csv", header=T, stringsAsFactors=T)
head(data)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
head(data)
sum(data[data$booking==1, 'id'] %in% names(c2)) #1198
sum(data[data$booking==0, 'id'] %in% names(c1)) #1522
data$booking
sum(data[data$booking==0, 'id'] %in% names(c2)) #1198
sum(data[data$booking==1, 'id'] %in% names(c1)) #1522
sum(data[data$booking==1, 'id'] %in% names(c2)) #1198
sum(data[data$booking==0, 'id'] %in% names(c1)) #1522
data <- read.csv("~/export/clickstream.csv", header=T, stringsAsFactors=T)
head(data)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
sum(data[data$interaction==1, 'id'] %in% names(c2)) #1198
sum(data[data$interaction==0, 'id'] %in% names(c1)) #1522
?clusterClickstreams
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 2, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
sum(data[data$interaction==1, 'id'] %in% names(c2)) #1198
sum(data[data$interaction==0, 'id'] %in% names(c1)) #1522
mc <- fitMarkovChain(cls)
plot(mc)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 0, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
sum(data[data$interaction==1, 'id'] %in% names(c2)) #1198
sum(data[data$interaction==0, 'id'] %in% names(c1)) #1522
mc <- fitMarkovChain(cls)
plot(mc)
d = lapply(data$clickstream, function(x) gsub("[][']", " ", as.character(x)))
d = sapply(d, function(x) gsub(" ", "", as.character(x)))
clickstream = c()
for (i in seq(1, length(d))){
clickstream = c(clickstream, d[i])
}
csf <- tempfile()
writeLines(d, csf)
cls <- readClickstreams(csf, header = TRUE)
clusters <- clusterClickstreams(cls, order = 1, centers = 2)
c1 <- clusters$clusters[[1]]
c2 <- clusters$clusters[[2]]
sum(data[data$interaction==1, 'id'] %in% names(c2)) #1198
sum(data[data$interaction==0, 'id'] %in% names(c1)) #1522
mc <- fitMarkovChain(cls)
plot(mc)
p = 300/2000
p
z = qnorm(0.995)
z
se = sqrt(p*(1-p)/2000)
p + z*se
p
p - z*se
z = qnorm(0.975)
z
se = .00445
z*se
974/10072 - 1242/9886
974/10072 - 1242/9886
0.02892847-0.00872184
-0.00872184-0.02892847
0.00872184-0.02892847
-0.00872184+0.02892847
0.00872184+0.02892847
log(0.8)
log(0.8)/-15
log(0.8)/-15 *60
lambda = log(0.8)/-15
lambda * 60 * exp(-lambda*60)
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
download.file("http://www.sharpsightlabs.com/wp-content/uploads/2014/12/sf_crime_YTD-2014-12_REDUCED.txt.zip", destfile="sf_crime_YTD-2014-12_REDUCED.txt.zip")
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
shiny::runApp('Box Sync/Extra Projects/TravellerApp/TravelWorldSpunky-master/063-superzip-example')
